{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Huffman and Shannon codes\n",
        "For this assignment, fill in the missing implemenation of the functions below.\n",
        "\n",
        "*Hint: use the code from the practicals to guide you on what to fill in.*"
      ],
      "metadata": {
        "id": "MiVJGIv5Ouat"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "p2Vpq9RS3orI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 825
        },
        "outputId": "0f9d42a3-b574-4caf-de83-ae61161c430d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original Text Sample: ﻿The Project Gutenberg eBook of The Iliad\n",
            "    \n",
            "This ebook is for the use of anyone anywhere in the United States and\n",
            "most other parts of the world at no cost and with almost no restrictions\n",
            "whatsoever. You may copy it, give it away or re-use it under the terms\n",
            "of the Project Gutenberg License included with this ebook or online\n",
            "at www.gutenberg.org. If you are not located in the United States,\n",
            "you will have to check the laws of the country where you are located\n",
            "before using this eBook.\n",
            "\n",
            "Title: Th\n",
            "Decoded Huffman Text Sample: ﻿The Project Gutenberg eBook of The Iliad\n",
            "    \n",
            "This ebook is for the use of anyone anywhere in the United States and\n",
            "most other parts of the world at no cost and with almost no restrictions\n",
            "whatsoever. You may copy it, give it away or re-use it under the terms\n",
            "of the Project Gutenberg License included with this ebook or online\n",
            "at www.gutenberg.org. If you are not located in the United States,\n",
            "you will have to check the laws of the country where you are located\n",
            "before using this eBook.\n",
            "\n",
            "Title: Th\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Character  Frequency  Probability          Huffman Code  Shannon Code  \\\n",
              "0          ﻿          1     0.000001   1011010000100110110      0.999998   \n",
              "1          T       5652     0.006690               1000001      0.938106   \n",
              "2          h      46551     0.055097                  0110      0.416442   \n",
              "3          e      76144     0.090123                  1111      0.243107   \n",
              "4                129255     0.152984                   110      0.152984   \n",
              "..       ...        ...          ...                   ...           ...   \n",
              "87         9          8     0.000009     11100001100010000      0.999981   \n",
              "88         ™         57     0.000067        10110100001011      0.999595   \n",
              "89         •          4     0.000005     10110100001001100      0.999994   \n",
              "90         %          1     0.000001  10110100001001101111      1.000000   \n",
              "91         $          2     0.000002    101101000010011010      0.999996   \n",
              "\n",
              "    Entropy h_i  \n",
              "0      0.000023  \n",
              "1      0.048325  \n",
              "2      0.230409  \n",
              "3      0.312903  \n",
              "4      0.414365  \n",
              "..          ...  \n",
              "87     0.000158  \n",
              "88     0.000935  \n",
              "89     0.000084  \n",
              "90     0.000023  \n",
              "91     0.000044  \n",
              "\n",
              "[92 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8fa7dbd4-8d18-48a7-9b46-469cbfb3eaf2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Character</th>\n",
              "      <th>Frequency</th>\n",
              "      <th>Probability</th>\n",
              "      <th>Huffman Code</th>\n",
              "      <th>Shannon Code</th>\n",
              "      <th>Entropy h_i</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>﻿</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000001</td>\n",
              "      <td>1011010000100110110</td>\n",
              "      <td>0.999998</td>\n",
              "      <td>0.000023</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>T</td>\n",
              "      <td>5652</td>\n",
              "      <td>0.006690</td>\n",
              "      <td>1000001</td>\n",
              "      <td>0.938106</td>\n",
              "      <td>0.048325</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>h</td>\n",
              "      <td>46551</td>\n",
              "      <td>0.055097</td>\n",
              "      <td>0110</td>\n",
              "      <td>0.416442</td>\n",
              "      <td>0.230409</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>e</td>\n",
              "      <td>76144</td>\n",
              "      <td>0.090123</td>\n",
              "      <td>1111</td>\n",
              "      <td>0.243107</td>\n",
              "      <td>0.312903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td></td>\n",
              "      <td>129255</td>\n",
              "      <td>0.152984</td>\n",
              "      <td>110</td>\n",
              "      <td>0.152984</td>\n",
              "      <td>0.414365</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>87</th>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>0.000009</td>\n",
              "      <td>11100001100010000</td>\n",
              "      <td>0.999981</td>\n",
              "      <td>0.000158</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>88</th>\n",
              "      <td>™</td>\n",
              "      <td>57</td>\n",
              "      <td>0.000067</td>\n",
              "      <td>10110100001011</td>\n",
              "      <td>0.999595</td>\n",
              "      <td>0.000935</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89</th>\n",
              "      <td>•</td>\n",
              "      <td>4</td>\n",
              "      <td>0.000005</td>\n",
              "      <td>10110100001001100</td>\n",
              "      <td>0.999994</td>\n",
              "      <td>0.000084</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>90</th>\n",
              "      <td>%</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000001</td>\n",
              "      <td>10110100001001101111</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000023</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>91</th>\n",
              "      <td>$</td>\n",
              "      <td>2</td>\n",
              "      <td>0.000002</td>\n",
              "      <td>101101000010011010</td>\n",
              "      <td>0.999996</td>\n",
              "      <td>0.000044</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>92 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8fa7dbd4-8d18-48a7-9b46-469cbfb3eaf2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8fa7dbd4-8d18-48a7-9b46-469cbfb3eaf2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8fa7dbd4-8d18-48a7-9b46-469cbfb3eaf2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-49e34f41-fc5d-4753-9cf5-d87f924cadb3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-49e34f41-fc5d-4753-9cf5-d87f924cadb3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-49e34f41-fc5d-4753-9cf5-d87f924cadb3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 92,\n  \"fields\": [\n    {\n      \"column\": \"Character\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 92,\n        \"samples\": [\n          \"H\",\n          \"a\",\n          \"7\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19654,\n        \"min\": 1,\n        \"max\": 129255,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          15152,\n          1,\n          44208\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Probability\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02326280433730538,\n        \"min\": 1.1835846280762843e-06,\n        \"max\": 0.15298423110200013,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          0.017933674284611862,\n          1.1835846280762843e-06,\n          0.05232390923799638\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Huffman Code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 92,\n        \"samples\": [\n          \"10000000\",\n          \"0100\",\n          \"1011010000100111\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shannon Code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18532647219504778,\n        \"min\": 0.15298423110200013,\n        \"max\": 1.0000000000000004,\n        \"num_unique_values\": 92,\n        \"samples\": [\n          0.9675082347900499,\n          0.5234663406285545,\n          0.9999360864300844\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Entropy h_i\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08311470323535881,\n        \"min\": 2.3302894343417247e-05,\n        \"max\": 0.41436469573264545,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          0.10403656385510104,\n          2.3302894343417247e-05,\n          0.222710747310214\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "import numpy as np\n",
        "import heapq\n",
        "import random\n",
        "from collections import defaultdict, Counter\n",
        "import requests\n",
        "\n",
        "# Function to download text data from a URL and save to a file\n",
        "def download_text(url, filename):\n",
        "    response = requests.get(url, allow_redirects=True)\n",
        "    if response.status_code == 200:\n",
        "        with open(filename, 'wb') as file:\n",
        "            file.write(response.content)\n",
        "        return True\n",
        "    else:\n",
        "        print(f\"Failed to download the file. Status code: {response.status_code}\")\n",
        "        return False\n",
        "\n",
        "# Function to read text data from file\n",
        "def read_text_file(file_path):\n",
        "    with open(file_path, 'r', encoding='utf-8') as file:\n",
        "        return file.read()\n",
        "\n",
        "# Function to calculate character frequencies\n",
        "def calculate_frequencies(text):\n",
        "    return Counter(text)\n",
        "\n",
        "# TODO: Implement the Huffman coding function\n",
        "def generate_huffman_codes(freq_dict):\n",
        "    # Create a min heap of tuples containing character frequencies and characters\n",
        "    heap = [(freq, [char]) for char, freq in freq_dict.items()]\n",
        "    heapq.heapify(heap)\n",
        "\n",
        "    # Initialize an empty dictionary to store Huffman codes\n",
        "    huffman_codes = {}\n",
        "\n",
        "    # Continue merging nodes until only one node remains in the heap\n",
        "    while len(heap) > 1:\n",
        "        # Pop the two nodes with the lowest frequencies\n",
        "        freq1, chars1 = heapq.heappop(heap)\n",
        "        freq2, chars2 = heapq.heappop(heap)\n",
        "\n",
        "        # Merge the nodes and update their codes\n",
        "        merged_chars = chars1 + chars2\n",
        "        merged_freq = freq1 + freq2\n",
        "\n",
        "        # Assign '0' as the prefix code for the characters in chars1 and '1' for chars2\n",
        "        for char in chars1:\n",
        "            huffman_codes[char] = '0' + huffman_codes.get(char, '')\n",
        "        for char in chars2:\n",
        "            huffman_codes[char] = '1' + huffman_codes.get(char, '')\n",
        "\n",
        "        # Add the merged node back to the heap\n",
        "        heapq.heappush(heap, (merged_freq, merged_chars))\n",
        "\n",
        "    # Return the Huffman codes dictionary\n",
        "    return huffman_codes\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# TODO: Build a Huffman tree for decoding\n",
        "def build_huffman_tree(codes):\n",
        "    # Initialize an empty root node for the Huffman tree\n",
        "    root = {}\n",
        "    # Iterate over each character and its corresponding Huffman code\n",
        "    for char, code in codes.items():\n",
        "        node = root\n",
        "        # Traverse the tree based on the Huffman code for the current character\n",
        "        for bit in code:\n",
        "            # If the bit is not already present in the current node, create a new node\n",
        "            if bit not in node:\n",
        "                node[bit] = {}\n",
        "            # Move to the next node\n",
        "            node = node[bit]\n",
        "        # Assign the current character to the leaf node\n",
        "        node['char'] = char\n",
        "    return root\n",
        "\n",
        "# TODO: Implement the decoding function for Huffman encoded text\n",
        "def decode_huffman(encoded_text, tree):\n",
        "    # Initialize an empty string to store the decoded text\n",
        "    decoded_text = ''\n",
        "    # Start at the root of the Huffman tree\n",
        "    node = tree\n",
        "    # Iterate over each bit in the encoded text\n",
        "    for bit in encoded_text:\n",
        "        # Traverse the tree based on the current bit\n",
        "        if bit == '0':\n",
        "            if node is not None:\n",
        "                node = node.get('0')\n",
        "        else:\n",
        "            if node is not None:\n",
        "                node = node.get('1')\n",
        "        # If a leaf node containing a character is reached, append the character to the decoded text\n",
        "        if node is not None and 'char' in node:\n",
        "            decoded_text += node['char']\n",
        "            # Reset to the root of the tree to start decoding the next character\n",
        "            node = tree\n",
        "    return decoded_text\n",
        "\n",
        "# TODO: Simulate channel transmission that introduces errors\n",
        "def simulate_channel_transmission(code, error_probability=0.0):\n",
        "    transmitted_code = ''\n",
        "    # Iterate over each bit in the original code\n",
        "    for bit in code:\n",
        "        # Introduce errors based on the specified error probability\n",
        "        if random.random() < error_probability:\n",
        "            # Flip the bit if it's below the error probability threshold\n",
        "            transmitted_code += '1' if bit == '0' else '0'\n",
        "        else:\n",
        "            # Otherwise, keep the original bit\n",
        "            transmitted_code += bit\n",
        "    return transmitted_code\n",
        "\n",
        "# TODO: Generate Shannon codes using cumulative probabilities\n",
        "def generate_shannon_codes(freq_dict):\n",
        "    # Convert frequency values to integers\n",
        "    freq_dict = {char: int(freq) for char, freq in freq_dict.items()}\n",
        "\n",
        "    # Sort characters based on frequencies in descending order\n",
        "    sorted_chars = sorted(freq_dict, key=freq_dict.get, reverse=True)\n",
        "\n",
        "    # Initialize cumulative probability\n",
        "    cumulative_prob = 0\n",
        "    cumulative_probs = {}\n",
        "    # Calculate cumulative probabilities for each character\n",
        "    for char in sorted_chars:\n",
        "        prob = freq_dict[char] / sum(freq_dict.values())\n",
        "        cumulative_prob += prob\n",
        "        cumulative_probs[char] = cumulative_prob\n",
        "\n",
        "    # Return the dictionary of Shannon codes based on cumulative probabilities\n",
        "    return cumulative_probs\n",
        "\n",
        "\n",
        "    # Assign codes based on cumulative probabilities\n",
        "    shannon_codes = {}\n",
        "    code = ''\n",
        "    for char in sorted_chars:\n",
        "        shannon_codes[char] = code\n",
        "        code += '0' if cumulative_probs[char] <= 0.5 else '1'\n",
        "\n",
        "    return shannon_codes\n",
        "\n",
        "\n",
        "\n",
        "# Main execution flow (You may not need to modify this part)\n",
        "url = 'https://www.gutenberg.org/cache/epub/6150/pg6150.txt'\n",
        "filename ='gutenberg.txt'\n",
        "if download_text(url, filename):\n",
        "    text_data = read_text_file(filename)\n",
        "    freq_dict = calculate_frequencies(text_data)\n",
        "\n",
        "    # Generate Huffman codes and build tree\n",
        "    huffman_codes = generate_huffman_codes(freq_dict)\n",
        "    huffman_tree = build_huffman_tree(huffman_codes)\n",
        "\n",
        "    # Generate Shannon codes\n",
        "    shannon_codes = generate_shannon_codes(freq_dict)\n",
        "\n",
        "\n",
        "\n",
        "    # Encode text using Huffman codes\n",
        "    encoded_text_huffman = ''.join(huffman_codes[char] for char in text_data)\n",
        "\n",
        "    # Simulate transmitting encoded data and decode it\n",
        "    transmitted_code_huffman = simulate_channel_transmission(encoded_text_huffman)\n",
        "    decoded_text_huffman = decode_huffman(transmitted_code_huffman, huffman_tree)\n",
        "\n",
        "    print(\"Original Text Sample:\", text_data[:500])\n",
        "    print(\"Decoded Huffman Text Sample:\", decoded_text_huffman[:500])\n",
        "else:\n",
        "    print(\"Text download failed.\")\n",
        "\n",
        "# Use the following code to produce the table of code.\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from collections import Counter\n",
        "import math\n",
        "\n",
        "# Assume freq_dict, huffman_codes, and shannon_codes are already generated as per previous steps\n",
        "\n",
        "def calculate_entropy(probabilities):\n",
        "    return {char: -prob * math.log2(prob) if prob > 0 else 0 for char, prob in probabilities.items()}\n",
        "\n",
        "def create_table(freq_dict, huffman_codes, shannon_codes):\n",
        "    # Convert frequency values to integers\n",
        "    freq_dict = {char: int(freq) for char, freq in freq_dict.items()}\n",
        "\n",
        "    total = sum(freq_dict.values())\n",
        "    probabilities = {char: freq / total for char, freq in freq_dict.items()}\n",
        "    entropies = calculate_entropy(probabilities)\n",
        "\n",
        "    # Creating DataFrame\n",
        "    data = {\n",
        "        'Character': list(freq_dict.keys()),\n",
        "        'Frequency': list(freq_dict.values()),\n",
        "        'Probability': [probabilities[char] for char in freq_dict.keys()],\n",
        "        'Huffman Code': [huffman_codes[char] for char in freq_dict.keys()],\n",
        "        'Shannon Code': [shannon_codes[char] for char in freq_dict.keys()],\n",
        "        'Entropy h_i': [entropies[char] for char in freq_dict.keys()]\n",
        "    }\n",
        "    df = pd.DataFrame(data)\n",
        "    return df\n",
        "\n",
        "# Example call\n",
        "df = create_table(freq_dict, huffman_codes, shannon_codes)\n",
        "df"
      ]
    },
    {
      "source": [
        "# @title Entropy h_i\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "df['Entropy h_i'].plot(kind='hist', bins=20, title='Entropy h_i')\n",
        "plt.gca().spines[['top', 'right',]].set_visible(False)"
      ],
      "cell_type": "code",
      "execution_count": null,
      "outputs": [],
      "metadata": {
        "cellView": "form",
        "id": "Wf8PeAQFbn9P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "my_map = {'a': 1, 'b': 2}\n",
        "inv_map = {v: k for k, v in my_map.items()}\n",
        "inv_map"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VDxPxlTKImPt",
        "outputId": "ee156f2d-8a9c-4b82-f260-e7e3b79fafc8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{1: 'a', 2: 'b'}"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "jJOiSJjxK2_m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 2100
        },
        "id": "jdiPAms0K3YS",
        "outputId": "6576a051-ea55-4c6d-ee35-8dd10ec35ac9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Character  Frequency  Probability          Huffman Code  \\\n",
              "0          ﻿          1     0.000001   1011010000100110110   \n",
              "1          T       5652     0.006690               1000001   \n",
              "2          h      46551     0.055097                  0110   \n",
              "3          e      76144     0.090123                  1111   \n",
              "4                129255     0.152984                   110   \n",
              "..       ...        ...          ...                   ...   \n",
              "87         9          8     0.000009     11100001100010000   \n",
              "88         ™         57     0.000067        10110100001011   \n",
              "89         •          4     0.000005     10110100001001100   \n",
              "90         %          1     0.000001  10110100001001101111   \n",
              "91         $          2     0.000002    101101000010011010   \n",
              "\n",
              "             Shannon Code  Entropy h_i  \n",
              "0    11111111111111111101     0.000023  \n",
              "1                11110000     0.048325  \n",
              "2                   01101     0.230409  \n",
              "3                    0011     0.312903  \n",
              "4                     001     0.414365  \n",
              "..                    ...          ...  \n",
              "87      11111111111111101     0.000158  \n",
              "88         11111111111001     0.000935  \n",
              "89     111111111111111110     0.000084  \n",
              "90  100000000000000000000     0.000023  \n",
              "91    1111111111111111110     0.000044  \n",
              "\n",
              "[92 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-590b97e2-8afe-4bc7-a8da-f102cd8ae5aa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Character</th>\n",
              "      <th>Frequency</th>\n",
              "      <th>Probability</th>\n",
              "      <th>Huffman Code</th>\n",
              "      <th>Shannon Code</th>\n",
              "      <th>Entropy h_i</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>﻿</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000001</td>\n",
              "      <td>1011010000100110110</td>\n",
              "      <td>11111111111111111101</td>\n",
              "      <td>0.000023</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>T</td>\n",
              "      <td>5652</td>\n",
              "      <td>0.006690</td>\n",
              "      <td>1000001</td>\n",
              "      <td>11110000</td>\n",
              "      <td>0.048325</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>h</td>\n",
              "      <td>46551</td>\n",
              "      <td>0.055097</td>\n",
              "      <td>0110</td>\n",
              "      <td>01101</td>\n",
              "      <td>0.230409</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>e</td>\n",
              "      <td>76144</td>\n",
              "      <td>0.090123</td>\n",
              "      <td>1111</td>\n",
              "      <td>0011</td>\n",
              "      <td>0.312903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td></td>\n",
              "      <td>129255</td>\n",
              "      <td>0.152984</td>\n",
              "      <td>110</td>\n",
              "      <td>001</td>\n",
              "      <td>0.414365</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>87</th>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>0.000009</td>\n",
              "      <td>11100001100010000</td>\n",
              "      <td>11111111111111101</td>\n",
              "      <td>0.000158</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>88</th>\n",
              "      <td>™</td>\n",
              "      <td>57</td>\n",
              "      <td>0.000067</td>\n",
              "      <td>10110100001011</td>\n",
              "      <td>11111111111001</td>\n",
              "      <td>0.000935</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89</th>\n",
              "      <td>•</td>\n",
              "      <td>4</td>\n",
              "      <td>0.000005</td>\n",
              "      <td>10110100001001100</td>\n",
              "      <td>111111111111111110</td>\n",
              "      <td>0.000084</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>90</th>\n",
              "      <td>%</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000001</td>\n",
              "      <td>10110100001001101111</td>\n",
              "      <td>100000000000000000000</td>\n",
              "      <td>0.000023</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>91</th>\n",
              "      <td>$</td>\n",
              "      <td>2</td>\n",
              "      <td>0.000002</td>\n",
              "      <td>101101000010011010</td>\n",
              "      <td>1111111111111111110</td>\n",
              "      <td>0.000044</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>92 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-590b97e2-8afe-4bc7-a8da-f102cd8ae5aa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-590b97e2-8afe-4bc7-a8da-f102cd8ae5aa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-590b97e2-8afe-4bc7-a8da-f102cd8ae5aa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1b08f35b-d1a1-44ab-923b-2f6cdfde5998\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1b08f35b-d1a1-44ab-923b-2f6cdfde5998')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1b08f35b-d1a1-44ab-923b-2f6cdfde5998 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 92,\n  \"fields\": [\n    {\n      \"column\": \"Character\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 92,\n        \"samples\": [\n          \"H\",\n          \"a\",\n          \"7\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19654,\n        \"min\": 1,\n        \"max\": 129255,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          15152,\n          1,\n          44208\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Probability\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02326280433730538,\n        \"min\": 1.1835846280762843e-06,\n        \"max\": 0.15298423110200013,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          0.017933674284611862,\n          1.1835846280762843e-06,\n          0.05232390923799638\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Huffman Code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 92,\n        \"samples\": [\n          \"10000000\",\n          \"0100\",\n          \"1011010000100111\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shannon Code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 92,\n        \"samples\": [\n          \"111101111\",\n          \"10000\",\n          \"1111111111111011\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Entropy h_i\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08311470323535881,\n        \"min\": 2.3302894343417247e-05,\n        \"max\": 0.41436469573264545,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          0.10403656385510104,\n          2.3302894343417247e-05,\n          0.222710747310214\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ucHEMK_PNjE7"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
